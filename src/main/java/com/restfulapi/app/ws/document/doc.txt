                             ==========Service=====
         We mark beans with @Service to indicate that it’s holding the business logic.
          So there’s no any other specialty except using it in the service layer.


                                =======Entity=====
          @Entity annotation defines that a class can be mapped to a table.
          And that is it, it is just a marker, like for example Serializable interface.

          And why @Entity annotation is mandatory? ... well, it is the way how JPA is designed.
          When you create a new entity you have to do at least two things

          1. annotated it with @Entity

          2. create an id field and annotate it with @Id

     Anything else is optional, for example table name is derived from entity class name
     (and therefore @Table annotation can be optional),table's columns are derived from
     entities variables (and therefore @Column annotation can be optional), and so on ...


                            ====== @Repository=====
                   @Repository’s job is to catch persistence specific exceptions
                   and rethrow them as one of Spring’s unified unchecked exception.


                              ==========3.1. @Component======
              We can use @Component across the application to mark the beans as Spring’s managed components.

              @Service and @Repository are special cases of @Component.
              They are technically the same but we use them for the different purposes.

              @Service, @Controller, @Repository = {@Component + some more special functionality}
                   ┌────────────┬─────────────────────────────────────────────────────┐
                   │ Annotation │ Meaning                                             │
                   ├────────────┼─────────────────────────────────────────────────────┤
                   │ @Component │ generic stereotype for any Spring-managed component │
                   │ @Repository│ stereotype for persistence layer                    │
                   │ @Service   │ stereotype for service layer                        │
                   │ @Controller│ stereotype for presentation layer (spring-mvc)      │
                   └────────────┴─────────────────────────────────────────────────────┘

                   ========= @Bean=========
               @Bean is a method-level annotation and a direct analog of the XML <bean/> element.
               A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container.


              =================== Extending WebSecurityConfigureAdapter======
               Next, create a class that extends the WebSecurityConfigureAdapter.

               Add the annotation @EnableWebSecurity to the class to tell spring that
                this class is spring security configuration.

               Override the two overloaded methods configure(HttpSecurity) and configure(AuthenticationManagerBuilder).
               The configure(HttpSecurity) defines the mapping of secured URLs or path that will determine if the user
               can access specific pages. The configure(AuthenticationmanagerBuilder) determines how the security will
               handle the retrieval of user information commonly in the database.

               ===========ApplicationContextAware=============
              It is just how spring works. Spring calls that method as part of bean initialization.
              When spring instantiates beans, it looks for a couple of interfaces like
              ApplicationContextAware and InitializingBean.
             If they are found, the methods are invoked. E.g. (very simplified)

                @Bean and @Autowired do two very different things.
                The other answers here explain in a little more detail, but at a simpler level:

                @Bean tells Spring 'here is an instance of this class,
                please keep hold of it and give it back to me when I ask'.

                 @Autowired says 'please give me an instance of this class, for example,
                  one that I created with an @Bean annotation earlier'.


We can inject spring ApplicationContext as a bean into any bean. By doing so, we are effectively making
our bean ApplicationContext aware. Our bean then programmatically can retrieve other beans by calling
ApplicationContext.getBean()or retrieve any resources by calling applicationContext#getResource()


                    =========STATELESS===========
    stateless – no session will be created or used by Spring Security